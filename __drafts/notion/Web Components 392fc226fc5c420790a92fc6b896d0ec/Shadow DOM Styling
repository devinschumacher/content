# Shadow DOM Styling

The Shadow DOM may include both `<style>` and `<link rel="stylesheet" href="…">` tags.

`<link rel="stylesheet" href="…">` tags are HTTP cached.

As a general rule, local styles work only inside the shadow tree, and document styles work outside of it.

There are few exceptions:

- `:host`
- `:host(selector)`
- cascading

We can use `:host`-family of selectors to style the main element of the component. These styles (unless `!important`) can be overridden by the document.

## `:host`

The `:host` selector allows to select the shadow host (the element containing the shadow tree).

Example: We’re making `<custom-dialog>` element that should be centered. 

For that we need to style the `<custom-dialog>` element itself.

```jsx
<template id="tmpl">
  <style>
    /* the style will be applied from inside to the custom-dialog element */
    :host {
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      display: inline-block;
      border: 1px solid red;
      padding: 10px;
    }
  </style>
  <slot></slot>
</template>

<script>
customElements.define('custom-dialog', class extends HTMLElement {
  connectedCallback() {
    this.attachShadow({mode: 'open'}).append(tmpl.content.cloneNode(true));
  }
});
</script>

<custom-dialog>
  Hello!
</custom-dialog>
```

## The **`:host(selector)`**

Same as `:host`, but applied only if the shadow host matches the `selector`.

For example, we’d like to center the `<custom-dialog>` only if it has `centered` attribute:

```jsx
<template id="tmpl">
  <style>
    :host([centered]) {
      position: fixed;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      border-color: blue;
    }

    :host {
      display: inline-block;
      border: 1px solid red;
      padding: 10px;
    }
  </style>
  <slot></slot>
</template>

<script>
customElements.define('custom-dialog', class extends HTMLElement {
  connectedCallback() {
    this.attachShadow({mode: 'open'}).append(tmpl.content.cloneNode(true));
  }
});
</script>

<custom-dialog centered>
  Centered!
</custom-dialog>

<custom-dialog>
  Not centered.
</custom-dialog>
```

## Cascading

The shadow host (`<custom-dialog>` itself) resides in the light DOM, so it’s affected by document CSS rules.

If there’s a property styled both in `:host` locally, and in the document, then the document style takes precedence.

For example, if in the document we had:

```jsx
<style>
custom-dialog {
  padding: 0;
}
</style>
```

The `<custom-dialog>` would be without padding.

It’s very convenient, as we can setup “default” component styles in its `:host` rule, and then easily override them in the document.

The exception is when a local property is labelled `!important`, for such properties, local styles take precedence.