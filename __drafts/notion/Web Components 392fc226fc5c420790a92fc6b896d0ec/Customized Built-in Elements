# Customized Built-in Elements

We can *extend* and customize specific built-in HTML elements using inheritance from their classes.

With autonomous custom elements, we extend the `HTMLElement`, but here we extend *specific* HTML elements.

Here is a list of some common built-in HTML elements that we can *extend functionality on:*

| HTML Element | Short Definition |
| --- | --- |
| <a> | Defines a hyperlink |
| <button> | Defines a clickable button |
| <div> | Defines a section of the document |
| <form> | Defines a form for user input |
| <img> | Defines an image |
| <input> | Defines an input field |
| <label> | Defines a label for an input element |
| <li> | Defines a list item |
| <ol> | Defines an ordered list |
| <p> | Defines a paragraph |
| <select> | Defines a drop-down list |
| <table> | Defines a table |
| <td> | Defines a table cell |
| <textarea> | Defines a multiline input field |
| <th> | Defines a table header |
| <tr> | Defines a table row |
| <ul> | Defines an unordered list |

For example, HTML `<button>` elements (aka “buttons”) are instances of `HTMLButtonElement`.

1. Extend `HTMLButtonElement` with our class:

```jsx
class HelloButton extends HTMLButtonElement {
// custom element methods go here
}
```

1. Provide the 3rd argument to `customElements.define`, which specifies the tag:

```jsx
customElements.define('hello-button', HelloButton, {extends: 'button'});
```

<aside>
💡 There may be different tags that share the same DOM-class, that’s why specifying `extends` is needed.

</aside>

1. To use the custom element, insert a normal `<button>` tag & add `is="hello-button"` :

```jsx
<button is="hello-button"></button>
```

Putting it all together:

```jsx
<body>
  <script>
    class HelloButton extends HTMLButtonElement {
      constructor() {
        super();
          this.addEventListener('click', () => alert("Hello!"));
      }
    }

    customElements.define('hello-button', HelloButton, {extends: 'button'});
  
</script>

<button is="hello-button">Click me to see the browser say hello</button>
```

## TLDR

**Customized built-in elements**: extend existing HTML elements.

- Requires 3 `.define` arguments (rather than 2 for autonomous web elements)
- Requires an addition of `is="<element-name>"` in the HTML tag.

```jsx
class MyButton extends HTMLButtonElement { /*...*/ }

customElements.define('my-button', MyElement, {extends: 'button'});

<button is="my-button"></button>
```