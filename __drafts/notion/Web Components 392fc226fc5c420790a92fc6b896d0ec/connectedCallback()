# connectedCallback()

The **`connectedCallback()`** is a lifecycle method in the Custom Elements API of JavaScript, which is automatically called by the browser when a custom element is appended into a document-connected element.

This method is invoked every time the custom element is inserted into the DOM, which can occur more than once. 

*Essentially, it signifies that the element is now part of the connected DOM tree.*

You define the **`connectedCallback()`** in the class definition for your custom element. 

It's typically used for tasks associated with DOM tree attachment, such as:

1. Setting up any event listeners your component needs.
2. Accessing and manipulating the attributes or children of the element.
3. Fetching resources or rendering that require the element to be in the DOM.
4. 

### Access attributes or children of the element

In the `constructor()` of a custom web component, you can't safely manipulate (add, remove, or change) the element's attributes, children, or parent because the element isn't yet connected to the document's DOM. 

The **`connectedCallback()`** is invoked when the element is finally inserted into the DOM, so it is a safe place to manipulate the DOM or access any attributes of the element.

### P**erform any setup that requires the element to be in the DOM:**

Certain types of setup require the element to be in the DOM. For example, if you need to fetch resources based on the element's attributes or apply dynamic styles to the component, you should do this in the **`connectedCallback()`** because the element is guaranteed to be connected to the DOM at this point.

### A**dd or remove event listeners:**

Although you can set up event listeners in the constructor, you might want to add or remove them when the element is connected or disconnected from the DOM, respectively. This can be handled by setting up listeners in the **`connectedCallback()`** and cleaning them up in the **`disconnectedCallback()`**.

If your element doesn't need to do any setup when it's connected to the DOM, you don't need to define a **`connectedCallback()`**.