# Web Components: Introduction

Web components are a set of technologies that allow developers to create their own custom HTML elements - agnostic of any framework.

These elements can encapsulate their functionality and styling, making them portable and reusable across different projects without the risk of code collisions.

Web components consists of three main technologies, which can be used together to create versatile custom elements with encapsulated functionality that can be reused wherever you like without fear of code collisions.

1. **Custom elements**: A set of JavaScript APIs that allow you to define custom elements and their behavior, which can then be used as desired in your user interface.
- **Shadow DOM**: A set of JavaScript APIs for attaching an encapsulated "shadow" DOM tree to an element — which is rendered separately from the main document DOM — and controlling associated functionality. In this way, you can keep an element's features private, so they can be scripted and styled without the fear of collision with other parts of the document.
- **HTML templates**: The `[<template>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)` and `[<slot>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)` elements enable you to write markup templates that are not displayed in the rendered page. These can then be reused multiple times as the basis of a custom element's structure.

## Types of web components

There are two kinds of custom elements, autonomous custom elements & customized built-in elements.

1. **Autonomous custom elements** – “all-new” elements, extending the abstract `HTMLElement` class.
2. **Customized built-in elements** – extending built-in elements, like a customized button, based on `HTMLButtonElement` etc.

## How to use web components

The basic approach for implementing a web component generally looks something like this:

1. Create a class in which you specify your web component functionality, using the [class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) syntax.
2. Register your new custom element using the `[CustomElementRegistry.define()](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define)` method, passing it the element name to be defined, the class or function in which its functionality is specified, and optionally, what element it inherits from.
3. If required, attach a shadow DOM to the custom element using `[Element.attachShadow()](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow)` method. Add child elements, event listeners, etc., to the shadow DOM using regular DOM methods.
4. If required, define an HTML template using `[<template>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)` and `[<slot>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)`. Again use regular DOM methods to clone the template and attach it to your shadow DOM.
5. Use your custom element wherever you like on your page, just like you would any regular HTML element.

## Web Components: JavaScript Prerequisites

A non-exhaustive list of JavaScript terms you should know to work effectively with web components:

1. **Classes**: Classes are a template for creating objects. They encapsulate data with code to work on that data.
2. **Objects**: An object is a collection of related data and/or functionality. They usually consist of several variables and functions, which are called properties and methods when they are inside objects.
3. **Methods**: Methods are functions that are properties of an object.
4. **Properties**: Properties are values associated with an object.
5. **Getters and Setters**: They allow you to define Object Accessors (Computed Properties).
6. **Constructor**: This is a special method for creating and initializing an object created within a class.
7. **Shadow DOM**: This is a web standard that allows an element to encapsulate its style and functionality.
8. **Templates and Slots**: **`<template>`** and **`<slot>`** are web component standards allowing you to write reusable and configurable components.
9. **Custom Elements**: APIs that allow developers to define new types of HTML elements.
10. **Lifecycle Callbacks**: Specific methods triggered at different stages of an element's lifecycle like **`constructor()`**, **`connectedCallback()`**, **`disconnectedCallback()`**, **`attributeChangedCallback()`**, **`adoptedCallback()`**.
11. **Attributes and Properties**: Attributes are defined on the HTML itself and become properties when the browser converts HTML elements into JavaScript objects.
12. **Events and Event Handling**: Listening to or dispatching events to elements.
13. **Promises**: A way to handle asynchronous operations without blocking the execution of the rest of the program.
14. **Async/Await**: A syntax sugar over promises, makes asynchronous code easier to read and write.
15. **Modules**: Modules allow for the breaking up of code into separate, reusable chunks of code. You should understand the syntax for import/export.
16. **this Keyword**: This is a special keyword that changes value depending on how a function gets called.
17. **Closures**: A closure is a function having access to the parent scope, even after the parent function has closed.
18. **ES6 features**: Arrow functions, const/let, spread/rest operator, destructuring, template literals, etc.

Understanding these terms will go a long way towards getting you comfortable with web components and JavaScript in general.