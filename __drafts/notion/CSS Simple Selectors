# CSS Simple Selectors

CSS Simple selectors select HTML elements based on the HTML element’s “name”, “id”, or “class”.

## **CSS Element Selector**

The element selector selects all the HTML elements defined by the HTML element name.

```css
p {
    color: green;
    text-align: left;
}
```

In this example, all of the HTML `<p>` element tags will be selected, and styled with a color of “green”, and a text alignment of “left”.

## **CSS ID Selector**

The CSS ID selector uses the HTML element’s attribute of “id” to select only the HTML element with a specific “id”. 

So, instead of grabbing all of the `<p>` tags, as in the example above, we could select only the tag with an `id="paragraph1"`

The syntax to use for the CSS ID selector is a `#`

**Example:**

```css
#paragraph1 {
    color: blue;
    text-align: right;
}
```

Since HTML attributes of “id” are meant to be unique, you don’t even need to define the HTML element.

## **CSS Class Selector**

Similar to the ID select, the class selector will only grab HTML elements that have the attribute of the defined class.

The syntax to use for the CSS ID selector is a `.`

**Example:**

```css
.myclass {
    text-align: center;
    color: purple;
}
```

This CSS statement would style everything that shares the HTML attribute of `class=”myclass”`.

However, if you want to make your CSS more specific and only grab certain HTML tags with that class, then you can define that as well.

**Example:**

```css
p.myclass {
    text-align: center;
    color: purple;
}
```

In this example, the CSS would only style the HTML `<p>` tags with the class of `class="myclass"`.

## **CSS Universal Selector**

The CSS universal selector, an asterisk ( `*` ) grabs all of the HTMl elements on a page.

If you have any experience with other programming languages, or even something like REGEX, this should look familiar to you.

**Example:**

```css
* {
    text-align: right;
    color: orange;
}
```

That CSS rule will now affect every HTML element on the page.

## CSS Grouping Selector

The CSS Grouping selector lets use write cleaner, more concise code by allowing us to select all HTML elements that we want to apply the same style rules to with one statement, instead of having to define each of them separately.

For example, if we wanted to style all HTML headings ( `h1`, `h2`, `h3`, `h4`) and unordered lists ( `<ul>` ) to display with the color green, you might initially think that you need to write this CSS:

```css
h1 {
    color: green;
}

h2 {
    color: green;
}

h3 {
    color: green;
}

h4 {
    color: green;
}

ul {
    color: green;
}
```

However, the CSS grouping selector allows us to write these same rules with much less code, like this:

```css
h1, h2, h3, h4, ul {
    color: green;
}
```

## A list of the CSS Simple Selectors

| Selector | Example | Details |
| --- | --- | --- |
| #id | #movies | Select HTML element with id="movies" |
| .class | .myclass | Selects all HTML elements with class="myclass" |
| element.class | p.myclass | Selects all <p>HTML elements with class="myclass" |
| * | * | Selects all HTML elements |
| element | p | Selects all <p> HTML elements |
| element, element ... | h1, h2, h3, ul | Selects all h1, h2, h3 HTML elements and all ul. |