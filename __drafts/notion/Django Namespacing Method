# Django Namespacing Method

Table of contents:

---

In Django, namespacing is a way to make urls unique system-wide.

This way, you can call your URLs with the namespace.

```yaml
# courses/views.py

from django.urls import path
from . import views

app_name = 'courses'

urlpatterns = [
    path('', views.index, name='index'),
    path('best/<slug:slug>/', views.collection, name='collection'),
    path('<slug:slug>/', views.single, name='single'),
]
```

Then in your project's main **`urls.py`** file, you need to include these urls using the **`include`** function:

```yaml
# project/urls.py

from django.urls import include, path

urlpatterns = [
    # ...
    path('courses/', include('courses.urls')),
    # ...
]
```

This way, Django knows that this URLconf module is part of the "courses" application.

## Templates

In your templates, you can use the **`{% url %}`** tag with this syntax:

```yaml
<a href="{% url 'courses:index' %}">Go to index</a>
<a href="{% url 'courses:collection' slug=some_slug %}">View collection</a>
<a href="{% url 'courses:single' slug=some_slug %}">View single</a>
```

Where **`some_slug`** would be the variable containing the actual slug for the specific collection or single course you want to link to.

### Template tags syntax

When you use the `namespace` method you donâ€™t need to use the {{ }} syntax for template tags insude the {% %}. 

You would use:

```html
<a href="{% url 'courses:single' slug=boxer.name %}">View single</a>
```

### Templates directory

When you're using Django, the convention is to put templates inside a folder named "templates" in your app directory. 

These templates should then be namespaced by the app name.

So for your **`courses`** app, the templates would go in the directory **`courses/templates/courses/`**. 

So, **`example.html`** for the **`courses`** app would be located at **`courses/templates/courses/example.html`**. 

This way, Django knows where to look for templates for each specific app, and it also prevents naming conflicts between apps

## Reverse

After setting the application namespace, you can reverse namespaced URLs using the following syntax:

```yaml
reverse('courses:index')
reverse('courses:collection', args=[slug])
reverse('courses:single', args=[slug])
```

## FAQS

### If i use this namespacing method can i still use this template syntax

```html
<a href="/boxers/{{boxer.slug}}">{{ [boxer.name](http://boxer.name/) }}</a><br>
```

Yes.

### asdf

1. **URLs.py**

If you want to have different URL structures across multiple projects while using the same templates, then you can definitely achieve this.

The **`urls.py`** file in each Django project can be tailored to the specific URL structure that you want for that project. The views will still render the templates you specify, regardless of the URL structure.

As an example, consider you have two Django projects, Project1 and Project2, both using the same app "boxers". 

You have a template **`boxers/boxer_detail.html`** that you want to use in both projects, but you want to reach this template via different URLs in each project.

For each project, when including the app URLs, you can assign a namespace:

Project1 **`urls.py`**:

```python
# Project1/urls.py

from django.urls import path, include

urlpatterns = [
    path('boxers/<slug:slug>/', include('boxers.urls', namespace='boxers')),
]
```

In **`Project2`**, you could structure your URLs differently:

```python
# Project2/urls.py

from django.urls import path, include

urlpatterns = [
    path('b/<slug:slug>/', include('boxers.urls', namespace='boxers')),
]
```

Then in your **`boxers/urls.py`**, you need to provide the **`app_name`**:

```python
# boxers/urls.py

from django.urls import path
from . import views

app_name = 'boxers'

urlpatterns = [
    path('', views.boxer_detail, name='boxer_detail'),
]
```

Then, in your templates, you would use the **`{% url %}`** template tag along with the namespaced URL:

```python
<a href="{% url 'boxers:boxer_detail' slug=boxer.slug %}">{{ boxer.name }}</a><br>
```

This way, when Django processes this template tag, it will generate the correct URL according to the URL structure defined in the project's **`urls.py`**. 

You can reuse the same templates across multiple projects without having to edit the templates to fit each individual project's URL structure.

This **`{% url %}`** template tag usage will apply to both the projects irrespective of the different URL structures they have for the same view. In Project1, it will resolve to **`/boxers/{{boxer.slug}}/`**, while in Project2, it will resolve to **`/b/{{boxer.slug}}/`**.

### How do i load different TEMPLATES for a project while keeping the SAME URL STRUCTURE?

---

See: [How to Serve Different Templates (Page Designs) for the Same View (URLs) in Django](How%20to%20Serve%20Different%20Templates%20(Page%20Designs)%20fo%206443ba7474de4dada1065ac730cdd933.md) 

---

Instead of rendering the template directly in the **`core`** app view, you could pass the template name as a variable to the view from the respective project's **`urls.py`**.

Here's an example of how you can do that:

In the 'core' app, update the **`views.py`**:

```python
# core/views.py

from django.shortcuts import render

def about(request, template_name='about.html'):
    # Perform your view logic here.
    return render(request, template_name)
```

In **`Project1/urls.py`**:

```python
# Project1/urls.py

from django.urls import path
from core.views import about

urlpatterns = [
    path('about/', about, kwargs={'template_name': 'core/about_project1.html'}, name='about'),
]
```

In **`Project2/urls.py`**:

```python
# Project2/urls.py

from django.urls import path
from core.views import about

urlpatterns = [
    path('about/', about, kwargs={'template_name': 'core/about_project2.html'}, name='about'),
]
```

Your **app** would contain the templates:

```python
core/
  templates/
    core/
      about_project1.html
      about_project2.html
```

### How do I use templates from my PROJECTS directory for a specific template?

To use templates from your project's directory instead of an app's directory, you would place your templates in the templates directory at the root of your project. 

So your project structure would look like this:

```html
./
  manage.py
  templates/
    example.html
  my_project/
    __init__.py
    settings.py
    urls.py
    asgi.py
    wsgi.py
  boxers/
    __init__.py
    models.py
    views.py
    urls.py
```

In this case, **`example.html`** is a project-wide template that can be used by any app.

You would reference this template in your views just like any other template:

```python
from django.shortcuts import render

def some_view(request):
    # your view logic here
    return render(request, 'example.html', context)
```