# How to customize a Bootstrap theme

Topics: Bootstrap

**Table of Contents:**

---

There are two primary strategies for working with your theme.

## **Strategy 1: Working with source files**

While you *can* edit a theme’s source files directly, best practice is to **add additional SCSS or JS files to extend and override the theme’s source files with your own custom ones**. 

The major benefit of keeping a theme’s source files separate from your own additions is a simpler upgrade path when your theme is updated.

A simplified "top level" SCSS file might look something like this:

```
// Import your custom SCSS variables
// (Can contain custom variables, theme variable overrides, and Bootstrap core variable overrides)
@import 'custom-variables.scss';

// Import your theme's SCSS variables
// (Typically both custom variables and ones that override Bootstrap core variables)
@import 'theme/variables.scss';

// Import the Bootstrap core
// (This file imports all Bootstrap core's variables and components from the Bootstrap core package installed via npm)
@import '../../../node_modules/bootstrap/scss/bootstrap.scss';

// Import your theme's core SCSS
// (This file would import a bunch of component SCSS files)
@import 'theme/theme.scss';

// Import your custom components/styles
// (This file could import separate files or be a single SCSS file)
@import 'custom.scss';

```

Custom variables come before theme variables, which are before Bootstrap core variables?

Bootstrap core and most themes makes use of SCSS’s `!default` flag when setting variable values, which basically says "only set this variable value if it isn’t already defined". 

When used on all variables in these files, it means custom-variables actually has the highest priority in defining variables.

<aside>
❕ Each theme will have its own setup for SCSS imports, so you’ll have to follow the documentation and review the organization, but the above illustrates the correct overall approach to customizing your theme by working with source files.

</aside>

---

## **Strategy 2: Working with compiled files (Quickest Method)**

Working with the compiled files generated from running your theme’s build tools is the simplest, fastest way to get started with a theme. 

Simply attach the compiled CSS and JS files to an HTML page, or use an HTML page already provided in your theme. No build tools or local servers necessary.

<aside>
❕ For similar reasons outlined above in "Strategy 1: Working with source files", you’ll want to add additional CSS/JS files instead of editing your theme’s CSS/JS files to make updating your theme easier in the future.

</aside>

Simply create a new CSS/JS file and link it *after* the theme’s compiled CSS/JS in your HTML pages.

---

## **Deciding on a strategy**

It comes down to ***customization*** and ***control***.

**Let’s consider a few examples and our suggested strategy for each:**

- *"**I need to ship a site for my company/app and just want it to look great and work well".***
    
    Use the compiled CSS and JS. It’s easier to get started, easy to deploy, and if you need to customize a handful of things, you can add some extra CSS *after* the compiled CSS to overwrite or extend it. Easy peasy. Should you ever need to make more significant changes, you can reevaluate and start using the source files without much overhead.
    

- ***"I want to heavily customize the theme’s design to match my product’s brand and use it as a design system for my new company".***
    
    Use the source files. Themes were built for this! Richer customization like systemically changing color schemes or changing type styles benefit greatly from using a theme’s SCSS variables. Instead of overriding colors and type settings across dozens of components and pages, you can replace a single variable’s value and watch that propagate throughout the entire theme instantly.
    

- ***"I need to customize just a few things to start and maybe a little in the future.”***
    
    This one could go either way. We’d encourage you to ask yourself if the "few things" feel like *systemic* design changes, meaning do they effect a multitude of components and pages. For example, changing a color scheme effects *most* components, so you’ll want to use the SCSS color variables in the theme’s source, compile, then use the resulting CSS to get started. If the changes are less pervasive, like changing the height of the nav or the spacing between elements, you should be just fine using the compiled files and including some additional CSS/JS overrides to make adjustments.