# Django Management Commands

Topics: Django

- **Table of contents:**

---

<aside>
💡 Custom **management commands** are especially useful for running standalone scripts or for scripts that are periodically executed from the UNIX crontab or from Windows scheduled tasks control panel.

</aside>

# How to create/use management commands

1. Add a `management/commands/` directory to your application. Django will register a `manage.py` command for each Python module in that directory whose name doesn’t begin with an underscore. 

```python
management/
        __init__.py
        commands/
            __init__.py
            _private.py
            a_command.py
```

- Your commands will be made available to any project that includes your `app` application in `INSTALLED_APPS`.
- The `_private.py` module will not be available as a management command.
- Every “ `command.py` ” mgmt command is called a ‘module’.
- Every mgmt command must define a class `Command` that extends **`BaseCommand`** or one of its [subclasses](https://docs.djangoproject.com/en/4.2/howto/custom-management-commands/#ref-basecommand-subclasses).

1. Create your commands as individual `.py` files in the `commands/` directory. Write your management command by creating a class that inherits from `BaseCommand` and defining a `handle` method:

```python
from django.core.management.base import BaseCommand # imports the BaseCommand class to extend from
from app.models import YourModel as Whatever # imports your django model & aliases it

class Command(BaseCommand):
    help = 'Describe the command here'

		def ad

    def handle(self, *args, **options):
        self.stdout.write('This is a management command.')
```