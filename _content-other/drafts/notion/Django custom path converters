# Django custom path converters

A converter is a class that provides methods to handle matching, converting and reversing URL patterns.

A custom converter needs to implement two methods:

- **`to_python(self, value)`**: This method is used to convert the matched string into the type that will be used in your view.
- **`to_url(self, value)`**: This method is used when Django needs to generate a URL. It should convert your Python type into a string that can be used in a URL.

Here is an example of how you might implement a custom converter that matches any three lowercase letters:

```python
class ThreeLetterConverter:
    regex = '[a-z]{3}'

    def to_python(self, value):
        return value

    def to_url(self, value):
        return '%03s' % value
```

You would then need to register your converter in your URLs module before you can use it:

```python
from django.urls import register_converter
from .converters import ThreeLetterConverter

register_converter(ThreeLetterConverter, 'threeltr')

urlpatterns = [
    path('<threeltr:val>/', views.my_view),
]
```

In this case, the **`<threeltr:val>`** path converter will match any three lowercase letters and pass them as a string to **`my_view`**. 

When Django needs to reverse this URL, it will use the **`to_url`** method of **`ThreeLetterConverter`** to convert the value back into a string that can be used in a URL.