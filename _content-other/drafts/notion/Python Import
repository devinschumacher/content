# Python Import

Topics: Python
Module: Tutorials

In Python, the term "import" is used when we want to include libraries or modules that are not part of the core language. 

Modules can be various things like functions, methods, or types defined and implemented in separate files which you can easily include in your program. 

Understanding how to properly use imports is fundamental to becoming proficient in Python.

---

The most straightforward way to import in Python is using the `import` statement followed by the name of the module. 

## Basic Import

This makes all functionality from the module available in your current namespace.

```python
import math
```

### Modules - a quick refresher

A module is a separate file that contains Python code. 

This code can include functions, which are tasks that the program can perform, and classes, which are essentially templates for creating objects in the program. 

When we import a module, we're telling our program "Let's use the code that's in this file". 

This allows us to reuse code across different programs, which is a fundamental aspect of efficient programming.

#### Modules Example

Let's say we have a Python file named **`greetings.py`** that looks like this:

```python
def say_hello(name):
    return f"Hello, {name}!"
```

This file is a module because it contains Python code that we can use in other programs. 

For example, if we have another Python program in the same directory, we can import the **`greetings`** module and use its **`say_hello`** function like this:

```python
import greetings

print(greetings.say_hello("Alice"))
```

This program will output **`Hello, Alice!`**, demonstrating how we can use the **`say_hello`** function from the **`greetings`** module.

### Namespace - a quick refresher

A namespace in Python is a system that ensures that all the names in a program are unique and can be used without any conflict. 

Python implements namespaces as dictionaries with 'name as key' mapped to a corresponding 'object as value'.

Different namespaces can co-exist at a given time but are completely isolated.

When we say "current namespace", it refers to the location where a name is stored in Python. 

When you import a module, the functions, classes, and variables defined in that module are loaded into the current namespace, meaning you can access them in your current Python environment.

#### Namespace Example

Suppose we have two Python modules: `math` and `numpy`. Both of these modules have a function called `sqrt` (which calculates the square root of a number).

If we import both modules in the same program like so:

```
import math
import numpy
```

And then we try to call **`sqrt(4)`**, Python wouldn't know whether we want to use **`sqrt`** from the **`math`** module or **`numpy`** module. 

This is why we need to specify the namespace when calling the function: **`math.sqrt(4)`** or **`numpy.sqrt(4)`**. 

By mentioning the module name (or namespace), we make it clear to Python exactly which function we want to use.

### ### When to use a basic import

Use a basic import when you're going to use several functions or classes from the module and you don't mind referring to them with the module name as a prefix.

---

## **Importing with an Alias**

In Python, you can also import a module and assign it a different name in your current namespace. 

This is done using the **`as`** keyword, and is often done for brevity and ease of use when referring to it later in your code.

```python
import pandas as pd
```

### **Alias - a quick refresher**

An alias is a substitute name for a module in Python.

This can make your code easier to write and read, especially if the original module name is lengthy or if the alias is a widely adopted convention (like **`pd`** for **`pandas`**).

### Alias Example

Let's consider the popular data manipulation library **`pandas`**.

Because **`pandas`** is often used throughout a data analysis program, it's common to give it a shorter alias:

```python
import pandas as pd
```

Now, instead of having to write **`pandas`** every time we want to use a function from the library, we can use the shorter **`pd`**:

```python
df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
```

### **When to use an alias**

Use an alias when the module name is long and it needs to be used frequently in your code. Aliases can make your code more concise and easier to read.

## **Importing Specific Objects from a Module**

In Python, you can also import only specific functions or classes from a module, instead of importing the entire module. 

This is done using the **`from ... import ...`** statement.

```python
from math import sqrt
```

### **Importing Specific Objects - a quick refresher**

When we import specific objects, we're telling Python to only load those particular parts of the module into our current namespace.

This can be useful when you only need a small part of a module, and don't want to load the entire module into memory.

### Importing Specific Objects Example

Suppose we only need the **`sqrt`** function from the **`math`** module.

Instead of importing the entire module, we can import just this function:

```python
from math import sqrt

print(sqrt(16))
```

This program will output **`4.0`**, demonstrating how we can use the **`sqrt`** function from the **`math`** module.

### **When to use specific object import**

Use specific object import when you only need a particular function or class from a module, and you don't want to load the entire module into your namespace.

---

## **Importing All Objects from a Module**

In Python, you can also import everything from a module into your current namespace using the wildcard **`*`**.

```python
from math import *
```

### **Importing All Objects - a quick refresher**

When we use the wildcard **`*`**, we're telling Python to load every object from the module into our current namespace.

While this can be convenient, it should be used sparingly, as it can lead to name conflicts and make it harder to trace where an object came from.

### Importing All Objects Example

Suppose we want to use several functions from the **`math`** module. Instead of importing them one by one, we can import them all at once:

```python
from math import *

print(sqrt(16))
print(sin(pi))
```

This program will output **`4.0`** and **`1.2246467991473532e-16`**, demonstrating how we can use the **`sqrt`** and **`sin`** functions from the **`math`** module.

### **When to use all object import**

Use all object import sparingly, as it can lead to confusion and conflicts in your namespace. 

It can be hard to trace where an object came from if everything from a module is imported.

---

## **Relative Imports**

In Python, you can import a module that is relative to the current module or script. 

This is done using the **`from . import ...`** or **`from .. import ...`** syntax. The **`.`** and **`..`** refer to the current and parent directory, respectively.

```python
from . import my_module
from .. import my_parent_module
```

### **Relative Imports - a quick refresher**

Relative imports allow you to import modules that are in the same package or in a parent package.

This is particularly useful when your project grows larger and you organize your modules into packages and sub-packages.

### Relative Imports Example

Suppose we have the following project structure, and we want to import **`parent_module.py`** into **`module.py`**. 

```python
my_project/
├── parent_module.py
└── subpackage/
    └── module.py
```

We can do this with a relative import:

```python
# Inside module.py
from .. import parent_module
```

And if **`module.py`** had a sibling module **`sibling_module.py`** that it wanted to import:

```python
my_project/
├── parent_module.py
└── subpackage/
    ├── module.py
    └── **sibling_module.py**
```

In this structure, both **`module.py`** and **`sibling_module.py`** are in the same directory (i.e., they are sibling modules). 

So if **`module.py`** wants to import **`sibling_module.py`**, it can do so with a relative import:

```python
# Inside module.py
from . import sibling_module
```

This tells Python to look for **`sibling_module`** in the same directory as **`module.py`** and to import it.

### **When to use relative import**

Use relative imports when you're working within a single package and want to import a module from a "sibling" or "parent" package.

---

## **Intra-package Imports**

Python also allows for intra-package imports, which allow modules to import from each other within the same package.

```python
from .moduleA import functionA
```

### **Intra-package Imports - a quick refresher**

Intra-package imports are a way to share common code among several modules within a package.

They can be particularly useful when you are organizing your code into a hierarchy of modules and packages.

### Intra-package Imports Example

Suppose we have a package named **`my_package`** with two modules: **`moduleA`** and **`moduleB`**.

**`moduleA`** has a function **`functionA`** that **`moduleB`** wants to use. We can do this with an intra-package import:

```python
# Inside moduleB.py
from .moduleA import functionA
```

This tells Python to look for **`moduleA`** in the same package as **`moduleB`**, and to import **`functionA`** from it.

### **When to use intra-package imports**

Use intra-package imports when organizing your code into a hierarchy of modules and packages, and when you want to share common code among several submodules.

---

## **Importing from a Package**

Python allows you to import modules from packages. A package in Python is simply a way of organizing related modules into a directory hierarchy.

```python
import package_name.module_name
```

### **Importing from a Package - a quick refresher**

When we import a module from a package, we're telling Python to look for the module inside the package directory.

Packages are a way of structuring Python’s module namespace by using "dotted module names".

### Importing from a Package Example

Suppose we have a package named **`my_package`** with a module **`my_module`**. The directory structure would look like this:

```python
my_project/
└── my_package/
    └── my_module.py
```

We can import **`my_module`** from **`my_package`** like this:

```python
import my_package.my_module
```

Now we can use the functions or classes defined in **`my_module`** by prefixing them with **`my_package.my_module`**.

### **When to use package import**

Use package import when you have a hierarchy of modules organized into packages and subpackages, and you want to refer to them using their full path.

---

## **Importing from Subpackages**

Python also allows you to import modules from subpackages. 

A subpackage is simply a package that is located inside another package.

```python
from package_name.subpackage_name import module_name
```

### **Importing from Subpackages - a quick refresher**

When we import a module from a subpackage, we're telling Python to look for the module inside the subpackage directory.

### Importing from Subpackages Example

Suppose we have a package named **`my_package`** with a subpackage **`my_subpackage`** that contains a module **`my_module`**. 

The directory structure would look like this:

```python
my_project/
└── my_package/
    └── my_subpackage/
        └── my_module.py
```

We can import **`my_module`** from **`my_subpackage`** like this:

```python
from my_package.my_subpackage import my_module
```

Now we can use the functions or classes defined in **`my_module`** without needing to prefix them with the package or subpackage name.

### **When to use subpackage import**

Use subpackage import when you want to import a module from a subpackage of a package.

---

## Python Imports Summary Chart

| Import Type | Syntax | When to Use |
| --- | --- | --- |
| Basic Import | import module_name | When you're going to use several functions or classes from the module and you don't mind referring to them with the module name as a prefix. |
| Importing with an Alias | import module_name as alias | When the module has a long name and it needs to be used frequently. |
| Importing Specific Objects | from module_name import object_name | When you only need a particular function or class from a module, and you don't want to load the entire module into your namespace. |
| Importing All Objects | from module_name import * | When you want to import all functions and classes from a module, but be cautious as it can lead to confusion and conflicts in your namespace. |
| Relative Imports | from .module_name import object_name 

from ..module_name import object_name | When you're working within a single package and want to import a module from a "sibling" or "parent" package. |
| Intra-package Imports | from . import module_name

from .. import module_name | When organizing your code into a hierarchy of modules and packages, and when you want to share common code among several submodules. |
| Importing from a Package | import package_name.module_name | When you have a hierarchy of modules organized into packages and subpackages, and you want to refer to them using their full path. |
| Importing from Subpackages | from package_name.subpackage_name import module_name | When you want to import a module from a subpackage of a package. |

## **Frequently asked questions about how to import ____ in Python**

### **How to import numpy in Python?**

To import the numpy library in Python, you would simply use the **`import`** keyword:

```python
import numpy
```

However, it is a common convention to import numpy under the alias **`np`** for brevity:

```python
import numpy as np
```

### **How to import pandas in Python?**

Pandas can be imported in Python using the **`import`** keyword:

```python
import pandas
```

Similarly to numpy, it's common to import pandas under the alias **`pd`**:

```python
import pandas as pd
```

### **How to import CSV file in Python?**

To import a CSV file in Python, you would typically use the pandas library's **`read_csv`** function:

```python
import pandas as pd

df = pd.read_csv('filename.csv')
```

In this example, 'filename.csv' should be replaced with the path to your CSV file. The **`read_csv`** function returns a DataFrame, which is stored in **`df`**.

### **How to import function from another Python file?**

Let's assume you have a function named **`my_function`** in a Python file named **`my_module.py`**. To import this function, you would use the **`from ... import ...`** syntax:

```python
from my_module import my_function
```

You can then call **`my_function`** in your code as if it was defined in the same file.

### **How to import matplotlib in Python?**

Matplotlib is typically imported under the alias **`plt`**:

```python
import matplotlib.pyplot as plt
```

This line imports the **`pyplot`** sub-module of matplotlib, which provides a MATLAB-like interface for making plots and charts.

### **How to import a file in Python?**

If you have a Python file (a **`.py`** file), you can import it just like you would import a module. For example, if you have a file named **`my_file.py`**, you can import it with:

```python
import my_file
```

Then you can access any functions or classes defined in **`my_file`**.

### **How to import random in Python?**

The random module can be imported just like any other built-in Python module:

```python
import random
```

After this, you can use functions from the random module like **`random.randint`**, **`random.choice`**, etc.

### **How to import math in Python?**

To import the math module in Python, use the **`import`** keyword:

```python
import math
```

You can then use math functions like **`math.sqrt`**, **`math.sin`**, etc.

### **How to import libraries in Python?**

Importing libraries in Python is done using the **`import`** keyword. For example, to import the library **`numpy`**, you would write:

```python
import numpy
```

### **How to import text file into Python?**

To import a text file in Python, you can use the built-in **`open`** function:

```python
with open('filename.txt', 'r') as f:
    data = f.read()
```

In this example, 'filename.txt' should be replaced with the path to your text file. The **`read`** method reads the entire contents of the file into a string, which is stored in **`data`**.

### **How to import a CSV file in Python?**

To import a CSV file in Python, you would typically use the pandas library's **`read_csv`** function:

```python
import pandas as pd

df = pd.read_csv('filename.csv')
```

In this example, 'filename.csv' should be replaced with the path to your CSV file. The **`read_csv`** function returns a DataFrame, which is stored in **`df`**.

### **How to import class from another Python file?**

If you have a class named **`MyClass`** in a Python file named **`my_module.py`**, you can import it using the **`from ... import ...`** syntax:

```python
from my_module import MyClass
```

Then you can create an instance of **`MyClass`** in your code as if it was defined in the same file.

### **How to import turtle in Python?**

The turtle module is a built-in module in Python for creating basic graphics. It can be imported like this:

```python
import turtle
```

You can then create a new turtle object and use the turtle's methods to move it around the screen.

### **How to import pi in Python?**

The number pi is a mathematical constant that is available in Python's math module. To import it, you would use the **`from ... import ...`** syntax:

```python
from math import pi
```

You can then use **`pi`** in your code as if it was a variable.