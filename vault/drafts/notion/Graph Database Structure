# Graph Database Structure

Topics: Graph Databases, Neo4j

In a graph database like Neo4j, data is typically represented with three key components: nodes, relationships, and properties. So, yes, those are the basic field types you see in Neo4j, but it's important to understand what they represent:

## 1. Nodes:

**Definition**: *Nodes are the entities or objects in your database.* 

**Analogy**: You can think of them as the “nouns of your database.”

**Example**: In a social network, for instance, a `person` or a `post` could be represented as a node. 

Every node has a `node labels`.

`Node labels` describe what the entity is. 

They are used to categorize nodes into different types. 

For example: in a database of a company, you might have nodes labeled as "Employee", "Department", "Project", etc.

---

## 2. **Relationships**:

**Definition**: *Relationships are the connections between nodes. They show how nodes are related to each other.* 

**Example:** In a social network, an example of a relationship might be "FRIENDS_WITH" or "POSTED". 

Each relationship in Neo4j always has a `direction`, a `type`, a `start node`, and an `end node`.

`Relationship types` are used to categorize the different kinds of relationships that can exist between nodes.

A "FRIENDS_WITH" relationship might have a property like "since_date", indicating when two people became friends.

---

## 3. **Properties**:

Definition: *These are the attributes or data associated with nodes and relationships.* 

Example: A person node might have properties like "name", "email", and "age". 

A "FRIENDS_WITH" relationship might have a property like "since_date", indicating when two people became friends.

---

# Planning the graph DB

[https://docs.google.com/spreadsheets/d/1HS9deEPXz3kxFI8jKvB8XU0jqrQq_Ql3Hj858sC9y9o/edit#gid=860021812](https://docs.google.com/spreadsheets/d/1HS9deEPXz3kxFI8jKvB8XU0jqrQq_Ql3Hj858sC9y9o/edit#gid=860021812)

***Note**: "Start Node", "Relationship Type", "End Node", and "Relationship Properties" columns are only filled out for the relationships. The rows for individual properties don't have these columns filled out because the relationships are defined at the entity level, not at the property level.*